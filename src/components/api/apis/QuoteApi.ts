/* tslint:disable */
/* eslint-disable */
/**
 * PoenApi
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ProblemDetails,
  Quote,
  QuotePaginatedResult,
} from '../models/index';
import {
    ProblemDetailsFromJSON,
    ProblemDetailsToJSON,
    QuoteFromJSON,
    QuoteToJSON,
    QuotePaginatedResultFromJSON,
    QuotePaginatedResultToJSON,
} from '../models/index';

export interface QuoteCreateRequest {
    quote?: Quote;
}

export interface QuoteDeleteRequest {
    id: number;
}

export interface QuoteGetAllRequest {
    filter?: string;
    sort?: string;
    pageNo?: number;
    pageSize?: number;
}

export interface QuoteGetByIdRequest {
    id: number;
}

export interface QuoteUpdateRequest {
    id: number;
    quote?: Quote;
}

/**
 * 
 */
export class QuoteApi extends runtime.BaseAPI {

    /**
     */
    async quoteCreateRaw(requestParameters: QuoteCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Quote>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/Quote/Create`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: QuoteToJSON(requestParameters['quote']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => QuoteFromJSON(jsonValue));
    }

    /**
     */
    async quoteCreate(requestParameters: QuoteCreateRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Quote> {
        const response = await this.quoteCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async quoteDeleteRaw(requestParameters: QuoteDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling quoteDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/Quote/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async quoteDelete(requestParameters: QuoteDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.quoteDeleteRaw(requestParameters, initOverrides);
    }

    /**
     */
    async quoteGetAllRaw(requestParameters: QuoteGetAllRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<QuotePaginatedResult>> {
        const queryParameters: any = {};

        if (requestParameters['filter'] != null) {
            queryParameters['filter'] = requestParameters['filter'];
        }

        if (requestParameters['sort'] != null) {
            queryParameters['sort'] = requestParameters['sort'];
        }

        if (requestParameters['pageNo'] != null) {
            queryParameters['pageNo'] = requestParameters['pageNo'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['pageSize'] = requestParameters['pageSize'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/Quote/GetAll`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => QuotePaginatedResultFromJSON(jsonValue));
    }

    /**
     */
    async quoteGetAll(requestParameters: QuoteGetAllRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<QuotePaginatedResult> {
        const response = await this.quoteGetAllRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async quoteGetByIdRaw(requestParameters: QuoteGetByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Quote>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling quoteGetById().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/Quote/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => QuoteFromJSON(jsonValue));
    }

    /**
     */
    async quoteGetById(requestParameters: QuoteGetByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Quote> {
        const response = await this.quoteGetByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async quoteUpdateRaw(requestParameters: QuoteUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Quote>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling quoteUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/Quote/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: QuoteToJSON(requestParameters['quote']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => QuoteFromJSON(jsonValue));
    }

    /**
     */
    async quoteUpdate(requestParameters: QuoteUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Quote> {
        const response = await this.quoteUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
