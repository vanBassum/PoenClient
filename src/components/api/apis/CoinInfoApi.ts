/* tslint:disable */
/* eslint-disable */
/**
 * PoenApi
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CoinInfoDto,
  CoinInfoDtoPaginatedResult,
  ProblemDetails,
} from '../models/index';
import {
    CoinInfoDtoFromJSON,
    CoinInfoDtoToJSON,
    CoinInfoDtoPaginatedResultFromJSON,
    CoinInfoDtoPaginatedResultToJSON,
    ProblemDetailsFromJSON,
    ProblemDetailsToJSON,
} from '../models/index';

export interface CoinInfoGetRequest {
    filter?: string;
    sort?: string;
    pageNo?: number;
    pageSize?: number;
}

export interface CoinInfoIdDeleteRequest {
    id: number;
}

export interface CoinInfoIdGetRequest {
    id: number;
}

export interface CoinInfoIdPutRequest {
    id: number;
    coinInfoDto?: CoinInfoDto;
}

export interface CoinInfoPostRequest {
    coinInfoDto?: CoinInfoDto;
}

/**
 * 
 */
export class CoinInfoApi extends runtime.BaseAPI {

    /**
     */
    async coinInfoGetRaw(requestParameters: CoinInfoGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CoinInfoDtoPaginatedResult>> {
        const queryParameters: any = {};

        if (requestParameters['filter'] != null) {
            queryParameters['filter'] = requestParameters['filter'];
        }

        if (requestParameters['sort'] != null) {
            queryParameters['sort'] = requestParameters['sort'];
        }

        if (requestParameters['pageNo'] != null) {
            queryParameters['pageNo'] = requestParameters['pageNo'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['pageSize'] = requestParameters['pageSize'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/CoinInfo`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CoinInfoDtoPaginatedResultFromJSON(jsonValue));
    }

    /**
     */
    async coinInfoGet(requestParameters: CoinInfoGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CoinInfoDtoPaginatedResult> {
        const response = await this.coinInfoGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async coinInfoIdDeleteRaw(requestParameters: CoinInfoIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling coinInfoIdDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/CoinInfo/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async coinInfoIdDelete(requestParameters: CoinInfoIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.coinInfoIdDeleteRaw(requestParameters, initOverrides);
    }

    /**
     */
    async coinInfoIdGetRaw(requestParameters: CoinInfoIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CoinInfoDto>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling coinInfoIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/CoinInfo/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CoinInfoDtoFromJSON(jsonValue));
    }

    /**
     */
    async coinInfoIdGet(requestParameters: CoinInfoIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CoinInfoDto> {
        const response = await this.coinInfoIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async coinInfoIdPutRaw(requestParameters: CoinInfoIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CoinInfoDto>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling coinInfoIdPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/CoinInfo/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: CoinInfoDtoToJSON(requestParameters['coinInfoDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CoinInfoDtoFromJSON(jsonValue));
    }

    /**
     */
    async coinInfoIdPut(requestParameters: CoinInfoIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CoinInfoDto> {
        const response = await this.coinInfoIdPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async coinInfoPostRaw(requestParameters: CoinInfoPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CoinInfoDto>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/CoinInfo`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CoinInfoDtoToJSON(requestParameters['coinInfoDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CoinInfoDtoFromJSON(jsonValue));
    }

    /**
     */
    async coinInfoPost(requestParameters: CoinInfoPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CoinInfoDto> {
        const response = await this.coinInfoPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
